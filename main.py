import telebot
import traceback
import whisper
import subprocess
import os
import logging
from telebot import types

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ---
LOG_FOLDER = '.logs'
if not os.path.exists(LOG_FOLDER):
    os.makedirs(LOG_FOLDER)

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename=f'{LOG_FOLDER}/app.log'
)
logger = logging.getLogger('telegram-bot')


# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ ---
def get_bot_token():
    token = os.environ.get('BOT_TOKEN')
    if not token:
        try:
            from config import BOT_TOKEN
            token = BOT_TOKEN
        except ImportError:
            pass
    if not token:
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ config.py –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    return token


bot = telebot.TeleBot(get_bot_token())
model = whisper.load_model("small")


# --- –ö–æ–º–∞–Ω–¥—ã ---
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "üé§ *–ì–æ–ª–æ—Å–æ–≤–æ–π –±–æ—Ç*\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3, WAV, OGG), "
        "–∏ —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é —è–∑—ã–∫!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞",
        parse_mode='Markdown'
    )


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(
        message.chat.id,
        "‚ùì *–ü–æ–º–æ—â—å*\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "- –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "- –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã (MP3, WAV, OGG)\n\n"
        "–ë–æ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Å—Ç–∏–∫–µ—Ä—ã, GIF-–∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã.",
        parse_mode='Markdown'
    )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@bot.message_handler(content_types=[
    'sticker', 'animation', 'video_note',
    'location', 'contact', 'poll', 'dice'
])
def handle_unsupported(message):
    content_type = {
        'sticker': '—Å—Ç–∏–∫–µ—Ä',
        'animation': 'GIF-–∞–Ω–∏–º–∞—Ü–∏—é',
        'video_note': '–∫—Ä—É–∂–æ—á–µ–∫',
        'location': '–≥–µ–æ–ª–æ–∫–∞—Ü–∏—é',
        'contact': '–∫–æ–Ω—Ç–∞–∫—Ç',
        'poll': '–æ–ø—Ä–æ—Å',
        'dice': '–∏–≥—Ä–∞–ª—å–Ω—ã–π –∫—É–±–∏–∫'
    }.get(message.content_type, '—ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è')

    bot.reply_to(
        message,
        f"‚ùå –Ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é {content_type}.\n\n"
        "–Ø —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏ (MP3, WAV, OGG).\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –∞—É–¥–∏–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
    )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ) ---
@bot.message_handler(content_types=['photo', 'video'])
def handle_media(message):
    if message.photo:
        bot.reply_to(message, "üì∑ –Ø –≤–∏–∂—É —Ñ–æ—Ç–æ, –Ω–æ —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å –∞—É–¥–∏–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
    elif message.video:
        bot.reply_to(message, "üé• –Ø –≤–∏–∂—É –≤–∏–¥–µ–æ, –Ω–æ —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å –∞—É–¥–∏–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@bot.message_handler(content_types=['text'])
def handle_text(message):
    bot.reply_to(
        message,
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3, WAV, OGG), "
        "–∏ —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.",
        parse_mode='Markdown'
    )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ ---
@bot.message_handler(content_types=['voice', 'audio', 'document'])
def handle_audio(message):
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if message.voice:
            file_id = message.voice.file_id
            file_ext = "ogg"
        elif message.audio:
            file_id = message.audio.file_id
            file_ext = message.audio.file_name.split('.')[-1]
        elif message.document and message.document.mime_type.startswith('audio/'):
            file_id = message.document.file_id
            file_ext = message.document.file_name.split('.')[-1]
        else:
            bot.reply_to(message, "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã (MP3, WAV, OGG).")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        if file_ext not in ["mp3", "ogg", "wav"]:
            bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ù—É–∂–µ–Ω MP3, WAV –∏–ª–∏ OGG.")
            return

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_info = bot.get_file(file_id)
        bot.send_chat_action(message.chat.id, 'typing')
        downloaded_file = bot.download_file(file_info.file_path)
        input_file = f"audio.{file_ext}"

        with open(input_file, 'wb') as f:
            f.write(downloaded_file)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3 (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if file_ext != "mp3":
            subprocess.run(['ffmpeg', '-i', input_file, 'audio.mp3', '-y'], check=True)
            audio_file = "audio.mp3"
        else:
            audio_file = input_file

        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        result = model.transcribe(audio_file)
        text = result["text"]
        language = result["language"]

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        bot.reply_to(
            message,
            f"üîä *–†–µ–∑—É–ª—å—Ç–∞—Ç ({language})*:\n\n{text}",
            parse_mode='Markdown'
        )

    except subprocess.CalledProcessError:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω FFmpeg.")
        logger.error("FFmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        logger.error(f"–û—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for f in ["audio.mp3", "audio.ogg", "audio.wav"]:
            if os.path.exists(f):
                os.remove(f)


if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()
